<UserControl
	x:Class="Phoenix.UI.Wpf.Architecture.VMFirst.DialogProvider.Metro.Showcase.Views.OwnButtonProvidingView"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:local="clr-namespace:Phoenix.UI.Wpf.Architecture.VMFirst.DialogProvider.Metro.Showcase.Views"
	d:DesignWidth="800"
	mc:Ignorable="d"
	>
	<DockPanel
		LastChildFill="True"
		>

		<TextBlock
			Name="Title"
			DockPanel.Dock="Top"
			Margin="0,0,0,10"
			FontSize="{DynamicResource DialogTitleFontSize}"
			Foreground="{DynamicResource AccentColorBrush}"
			Text="Title (must be provided by the content)"
			TextWrapping="Wrap"
		/>

		<Button
			Margin="0 10 0 0"
			DockPanel.Dock="Bottom"
			HorizontalAlignment="Right"
			Click="ButtonBase_OnClick"
			Content="Content Button"
			/>

		<TextBlock
			DockPanel.Dock="Top"
			FontSize="14"
			TextWrapping="Wrap"
			>
			This view model and its corresponding view demonstrate, how a view model can define its own buttons alongside the ones from the dialog container.<LineBreak />
			It would be possible to totally omit the &quot;Container&quot; button by simple not specifying any.<LineBreak />
			<LineBreak />
			• The &quot;Content&quot; button is part of the content views DOM. Styling must be applied from the view.<LineBreak />
			• The &quot;Container&quot; button will be displayed below the content view, as those are separate elements in the DOM.
		</TextBlock>

	</DockPanel>
</UserControl>